@page "/Terminal"
@using IdeventLibrary.Repositories
@using Microsoft.AspNetCore.SignalR.Client
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager _navigationManager

@layout NonAdminLayout

<div class="row">
    <h1 class="col-md-12 mx-auto text-center">Idevent</h1>
</div>
<div class="position-relative">
    <ScanCircle CircleText="@_circleText" Color="@_circleColor" />
    <div class="inputFieldScan">
        <EditForm Model="_formInput" OnSubmit="@SubmitNFC">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <InputTextSetFocus @bind-Value="@_formInput.Input"></InputTextSetFocus>
            </div>
        </EditForm>
    </div>
</div>
<div class="row">
    <div class="col-md-12 mx-auto">
        <h2 class="text-center">@_message</h2>
    </div>
</div>



@code {
    private string _circleText = "Ready";
    private string _circleColor = "#378DFF";
    private NFCInputModel _formInput = new NFCInputModel();
    private HubConnection _hubConnection;

    private string _message = "Please scan chip";

    private ChipRepository _chipRepository = new ChipRepository();

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthProvider.GetAuthenticationStateAsync();
        var userClaim = authState.User;
        if (userClaim.Identity.Name == null)
        {
            _circleText = "Awaiting operator";
            _circleColor = "yellow";
            _message = "Wait for the operator to login";
            return;
        }
        _circleText = "Ready";
        _circleColor = "#378DFF";
        _message = "Please scan chip";

        _hubConnection = new HubConnectionBuilder()
       .WithUrl(_navigationManager.ToAbsoluteUri("/connectionhub"), options =>
               {
                   options.UseDefaultCredentials = true;
               })
       .Build();

        _hubConnection.On<ChipModel>("TheChip", (chip) =>
         {
             _navigationManager.NavigateTo($"chipContent/{chip.Id}");
         });
        _hubConnection.On<ChipModel>("ChipNotActive", (chip) =>
        {
            _message = $"Chip is not active (Active between {chip.ValidFrom.Date:d} - {chip.ValidTo.Date:d})";
            _navigationManager.NavigateTo($"Error/Terminal/{_message}");
        });
        _hubConnection.On("InvalidChip", () =>
        {
            _message = $"Invalid chip. Contact administrator.";
            _navigationManager.NavigateTo($"Error/Terminal/{_message}");
        });
        await _hubConnection.StartAsync();
    }

    public async Task SubmitNFC()
    {
        AuthenticationState authState = await AuthProvider.GetAuthenticationStateAsync();
        var userClaim = authState.User;
        if (userClaim.Identity.Name == null)
        {
            _message = "Cannot continue before the operator has logged in.";
            await Task.Delay(3000);
            _message = "Please scan chip";
            return;
        }
        ChipModel chip = await ChipExists(_formInput.Input);
        if (chip != null)
        {
            bool chipIsActive = CheckIfChipIsActive(chip.ValidFrom, chip.ValidTo);
            if (chipIsActive)
            {
                _navigationManager.NavigateTo($"chipContent/{chip.Id}");
            }
            else
            {
                _message = $"Chip is not active (Active between {chip.ValidFrom.Date:d} - {chip.ValidTo.Date:d})";
                _navigationManager.NavigateTo($"Error/Terminal/{_message}");
            }
        }
        else
        {
            _message = $"Invalid chip. Contact administrator.";
            _navigationManager.NavigateTo($"Error/Terminal/{_message}");
        }

        // Reset the Model for new input.
        _formInput = new NFCInputModel();

    }
    public async Task<ChipModel> ChipExists(string chipId)
    {
        var result = await _chipRepository.GetBySecretId(chipId);
        return result;
    }
    private bool CheckIfChipIsActive(DateTimeOffset validFrom, DateTimeOffset validTo)
    {
        DateTimeOffset today = DateTimeOffset.Now.Date;
        int dateFromCheck = DateTimeOffset.Compare(today, validFrom.Date);
        int dateToCheck = DateTimeOffset.Compare(today, validTo.Date);
        bool chipIsActive = false;
        if (dateFromCheck >= 0 && dateToCheck <= 0)
        {
            chipIsActive = true;
        }
        return chipIsActive;
    }
}
