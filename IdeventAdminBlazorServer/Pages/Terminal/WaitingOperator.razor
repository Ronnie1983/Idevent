@page "/chipContent/{ChipId}"

@using IdeventLibrary.Repositories
@using Common
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager _navigationManager
@inject ChipRepository _chipRepository
@inject ChipContentRepository _chipContentRepository
@attribute [Authorize (Roles = "SuperAdmin, Admin, Operator")]


@layout NonAdminLayout

<div class="row">
    <h1 class="col-md-12 mx-auto text-center">Idevent</h1>
</div>

@if (_order != null)
{
    <div class="position-relative">
        <ScanCircle CircleText="Confirm" Color="#00C206" />
        <div class="inputFieldScan">
            <EditForm Model="_formInput" OnSubmit="@SubmitNFC">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <InputTextSetFocus @bind-Value="@_formInput.Input"></InputTextSetFocus>
                </div>

            </EditForm>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 mx-auto">
            <h2 class="text-center">@_message</h2>
        </div>
    </div>
    <div class="row">
        @if (_chip != null)
        {
            @if (_buyExists)
            {
                <div class="text-center">
                    <h3>Adding to chip</h3>
                    @foreach (var item in _order)
                    {
                        @if (item.EventStandId == EventStandId && item.Amount > 0)
                        {
                            <span>@item.Amount @item.Name</span><br />
                        }
                    }
                </div>

            }
            @if (_useExists)
            {
                <div class="text-center">
                    <h3>Removing from chip</h3>
                    @foreach (var item in _order)
                    {
                        @if (item.EventStandId == EventStandId && item.Amount < 0)
                        {
                            <span>@(item.Amount * -1) @item.Name</span><br />
                        }
                    }
                </div>
            }


        }
    </div>
}
@if (_order == null)
{

    <ScanCircle CircleText="Standby" Color="#00C206" />


    <div class="row">
        <div class="col-md-12 mx-auto">
            <h2 class="text-center">@_message</h2>
        </div>
    </div>
    <div class="row">
        <table class="table col-md-12 mx-auto">
            <thead>
                <tr>
                    <td>Product</td>
                    <td>Amount</td>
                </tr>
            </thead>
            <tbody>
                @if (_chip != null && _productList != null)
                {
                    @foreach (var item in _productList)
                    {
                        @if (item.EventStandId == EventStandId)
                        {
                            <tr>
                                <td>@item.Name</td>
                                <td>@item.Amount</td>
                            </tr>

                        }
                    }
                }
            </tbody>
        </table>
    </div>

}


@code {
    [Parameter]
    public string ChipId { get; set; }
    private string _message = "Please wait for operator";

    private HubConnection _hubConnection;
    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;
    private List<string> _messages = new List<string>();
    private ChipModel _chip;
    private List<StandProductModel> _order;
    private NFCInputModel _formInput = new NFCInputModel();
    private bool _buyExists = false;
    private bool _useExists = false;

    List<StandProductModel> _productList; 

    public int EventStandId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _chip = await _chipRepository.GetById(TryConvert(ChipId));

        //Opretter forbindelse til Hub
        _hubConnection = new HubConnectionBuilder()
           .WithUrl(_navigationManager.ToAbsoluteUri("/connectionhub"), options =>
                       {
                           options.UseDefaultCredentials = true;
                       })
           .Build();

        //Lytter i Eventhub på funktionen GetStand
        _hubConnection.On<int>("GetStand", async (stand) =>
        {
            EventStandId = stand;
            await GetProducts();
        });

        _hubConnection.On("CancelOrder", () =>
        {
            _navigationManager.NavigateTo($"Cancel");
        });

        _hubConnection.On<List<StandProductModel>>("FetchOrder", async (data) =>
          {
              _order = data;
              _message = "Please scan to confirm";
              foreach (var d in data)
              {
                  if (d.EventStandId == EventStandId)
                  {
                      if (d.Amount < 0)
                      {
                          _useExists = true;

                      }
                      if (d.Amount > 0)
                      {
                          _buyExists = true;
                      }

                  }
              }
              await InvokeAsync(StateHasChanged);
          });

        await _hubConnection.StartAsync();


        //Sender en request til Hub funktionen AskForStand
        await _hubConnection.SendAsync("AskForStand", _chip);
    }

    private async Task GetProducts()
    {
        _productList = await _chipContentRepository.GetAllContentByStandIdAndChipIdAsync(_chip.Id, EventStandId);
        await InvokeAsync(StateHasChanged);
    }

    private int TryConvert(string value)
    {
        int result = 0;
        try
        {
            result = Int32.Parse(value);

        }
        catch
        {
            Console.WriteLine("Unable to parse " + value);

        }
        return result;
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    public async Task SubmitNFC()
    {
        if (_chip.HashedId == _formInput.Input)
        {
            await _hubConnection.SendAsync("AcceptOrder", _formInput.Input);
            _navigationManager.NavigateTo($"Success");
        }
        else
        {
            await _hubConnection.SendAsync("FailedOrder");
            string errorMessage = "Wrong chip. Try again.";
            _navigationManager.NavigateTo($"Error/Terminal/{errorMessage}");
        }
    }
}
