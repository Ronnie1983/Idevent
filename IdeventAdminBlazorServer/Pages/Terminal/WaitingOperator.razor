@page "/chipContent/{id}"

@using IdeventLibrary.Repositories
@using IdeventAdminBlazorServer.Common
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager _navigationManager
@inject ChipRepository _chipRepository
@inject ChipContentRepository _chipContentRepository

    

@layout NonAdminLayout

<div class="row">
    <h1 class="col-md-12 mx-auto text-center">Idevent</h1>
</div>
<ScanCircle CircleText="Success" Color="#00C206"/>
<div class="row">
    <div class="col-md-12 mx-auto">
        <h2 class="text-center">@_message</h2>
    </div>
</div>
<div class="row">
    <table class="table col-md-12 mx-auto">
    <thead>
        <tr>
            <td>Product</td>
            <td>Amount</td>
        </tr>
    </thead>
    <tbody>
        @if(_chip != null)
        {
               @foreach(var item in _productList)
               {
                    @if(item.EventStandId == EventStandId)
                    {
                           <tr>
                                <td>@item.Name</td>
                                <td>@item.Amount</td>
                            </tr> 

                    }
               }
        }
     
    </tbody>
</table>
</div>


@code {
    [Parameter]
    public string Id { get; set; }
    private string _message = "Waiting operator";
    private HubConnection _hubConnection;
    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;
    private List<string> _messages = new List<string>();
    private ChipModel _chip = null;

    List<StandProductModel> _productList = new List<StandProductModel>();

    public int EventStandId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _chip = await _chipRepository.GetById(TryConvert(Id));
        
        //Opretter forbindelse til Hub
        _hubConnection = new HubConnectionBuilder()
           .WithUrl(_navigationManager.ToAbsoluteUri("/connectionhub"),options =>
                   {
                      options.UseDefaultCredentials = true;
                  })
           .Build();

        //Lytter i Eventhub på funktionen GetStand
        _hubConnection.On<int>("GetStand", async (stand) =>
        {
            EventStandId = stand;
            await GetProducts();
            StateHasChanged();
        });

        await _hubConnection.StartAsync();

        //Sender en request til Hub funktionen AskForStand
        await _hubConnection.SendAsync("AskForStand", _chip);

    }

    private async Task GetProducts()
    {
        _productList = await _chipContentRepository.GetAllContentByStandIdAndChipIdAsync(_chip.Id, EventStandId);
        StateHasChanged();
    }

    private int TryConvert(string value)
    {
        int result = 0;
        try
        {
            result = Int32.Parse(value);

        }
        catch
        {
            Console.WriteLine("Unable to parse " + value);

        }
        return result;
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
