@page "/AddUser"
@attribute [Authorize(Roles = "SuperAdmin, Admin")]

@using IdeventLibrary
@using System.ComponentModel.DataAnnotations
@inject UserRepository _userRepository
@inject NavigationManager _navigationManager
<h1>Add User</h1>
@foreach (var message in _errorMessages)
{
    <div class="alert alert-danger">
        @message
    </div>
    <div class="alert alert-danger">
        Known reasons for failure COULD be:
        <ul>
            <li>Password must contain 1 UpperCase, 1 digit and 1 lowercase character</li>
            <li>User with that Email already exists.</li>
        </ul>
    </div>
}
<EditForm Model=_validationUser OnValidSubmit=CreateUserAsync>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Email</label>
        <input class="form-control" @bind-value="_validationUser.Email" />
    </div>
    <div class="form-group">
        <label>Password</label>
        <input class="form-control" type="password" @bind-value="_validationUser.Password" />
    </div>
    <div class="form-group">
        @if (_user.Role != null)
        {
            <label>Role</label>
            <AuthorizeView Context="AdminContext" Roles="Admin">
                @if (_user.Role == @Enums.Roles.SuperAdmin.ToString())
                {
                    <p>Cannot change this user's role</p>
                }
                else
                {
                    <select class="form-control" value="@_user.Role" @onchange="SelectRole">
                        <option value="@Enums.Roles.Admin.ToString()">@Enums.Roles.Admin.ToString()</option>
                        <option value="@Enums.Roles.Operator.ToString()">@Enums.Roles.Operator.ToString()</option>
                        <option value="@Enums.Roles.User.ToString()">@Enums.Roles.User.ToString()</option>
                    </select>
                }
            </AuthorizeView>
            <AuthorizeView Context="SuperAdminContext" Roles="SuperAdmin">
                <select class="form-control" value="@_user.Role" @onchange="SelectRole">
                    <option value="@Enums.Roles.SuperAdmin.ToString()">@Enums.Roles.SuperAdmin.ToString()</option>
                    <option value="@Enums.Roles.Admin.ToString()">@Enums.Roles.Admin.ToString()</option>
                    <option value="@Enums.Roles.Operator.ToString()">@Enums.Roles.Operator.ToString()</option>
                    <option value="@Enums.Roles.User.ToString()">@Enums.Roles.User.ToString()</option>
                </select>
            </AuthorizeView>
        }
    </div>
    <button class="btn btn-primary">Submit</button>
    <NavigateButton ButtonText="Cancel" HtmlClasses="btn-danger" PageToNavigateTo="@Common.Helpers.NavigationArgument("Users")"></NavigateButton>
</EditForm>

@code {
    private UserModel _user;
    private UserModelCreate _validationUser;
    private List<string> _errorMessages = new();

    protected override void OnInitialized()
    {
        _validationUser = new UserModelCreate();
        _user = new UserModel();
    }

    private async Task CreateUserAsync()
    {
        _user.Email = _validationUser.Email;
        _user.UserName = _validationUser.Email;
        bool success = await _userRepository.CreateAsync(_user, _validationUser.Password);
        if (success)
        {
            _navigationManager.NavigateTo("Users");
        }
        else
        {
            _errorMessages.Clear();
            _errorMessages.Add("Failed to create user.");

        }
    }

    private void SelectRole(ChangeEventArgs e)
    {
        string role = e.Value.ToString();
        _user.Role = role;
    }
    public class UserModelCreate
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }
        [Required]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long.")]
        public string Password { get; set; }
    }
}

