@page "/Users"
@using IdeventLibrary
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization

@attribute [Authorize (Roles = "SuperAdmin, Admin, Operators")]
@inject AuthenticationStateProvider _authenticationStateProvider
@inject UserRepository _userRepository

@attribute [Authorize]

<h1>Users</h1>

@if (_messages != null)
{
    @foreach (string message in _messages)
        @message

}
@if (_users != null)
{
    <table class="table table-hover">
        <thead>
            <tr>
                @*<th scope="col">Selection</th>*@
                <th scope="col">Username</th>
                <th scope="col">Company</th>
                <th scope="col">Email</th>
                <th scope="col">Phone</th>
                <th scope="col">Role</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (UserModel user in _users)
            {
                <tr>
                    <td>@user.UserName</td> <!-- Default UserName is Email -->
                    @if (user.Company != null)
                    {
                        <td>@user.Company.Name</td>
                    }
                    else
                    {
                        <td>-</td> <!-- No company -->
                    }
                    <td>@user.Email</td>
                    <td>@user.PhoneNumber</td>
                    <td>@user.Role</td>
                    
                    <td>
                        <div class="btn-group">
                            <AuthorizeView Roles="User, Operator">
                                @if (user.Id == _profileData.Id)
                                {
                                    <NavigateButton PageToNavigateTo=@(Common.Helpers.NavigationArgument("EditUser/", user.Id)) ButtonText="Edit"/>
                                    <button class="btn btn-danger m-1" @onclick="async () => { await DeleteUser(user); }">Delete</button>
                                }
                            </AuthorizeView>

                            <AuthorizeView Roles="SuperAdmin, Admin">
                                @if (user.Role != "SuperAdmin")
                                {
                                    <NavigateButton PageToNavigateTo=@(Common.Helpers.NavigationArgument("EditUser/", user.Id)) ButtonText="Edit"/>
                                }
                                else
                                {
                                    <button class="btn btn-secondary m-1" disabled>Edit</button>
                                }
                                
                                @if (user.Id != _profileData.Id || user.Role != "SuperAdmin")
                                {
                                    <button class="btn btn-danger m-1" @onclick="async () => { await DeleteUser(user); }">Delete</button>

                                }
                                else
                                {
                                    <button class="btn btn-secondary m-1" disabled>Delete</button>
                                }
                            </AuthorizeView>
                        </div>
                    </td>
                    
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <Loader LoadingMessage="Loading users..." />
}

@code {
    private List<UserModel> _users;
    private List<string> _messages = new List<string>();
    private UserModel _profileData;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationState authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
            ClaimsPrincipal userClaim = authState.User;
            UserModel user = await _userRepository.GetByClaim(userClaim);

            _profileData = user;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        try
        {
            _users = await _userRepository.GetAllAsync();
            if (_profileData.Role != "SuperAdmin")
            {
                _users = _users.Where(x=>x.Company == null || x.Company.Id == _profileData.Company.Id).ToList();
            }
        }
        catch (Exception ex)
        {
            _messages.Add("Something went when fetching users.");
            Console.WriteLine(ex);
        }
    }

    private async Task DeleteUser(UserModel user)
    {
        bool result = await _userRepository.DeleteUser(user);
        if (result)
        {
            _users.Remove(user);
            _messages.Clear();
            _messages.Add($"{user.UserName} is deleted");
            StateHasChanged();
        }
        else
        {
            _messages.Clear();
            _messages.Add($"Failed to delete {user.UserName}");
            StateHasChanged();
        }
    }
}
