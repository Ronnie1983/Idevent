@page "/ChipDetail/{ChipId}"
@using IdeventLibrary.Repositories
<h1>Chip Details</h1>

<NavigateButton PageToNavigateTo="Chips" ButtonText="Back" HtmlClasses="btn-danger m-1" />
@if (_chip.Id == 0)
{
    <span>@_errorMessage</span>
}
@if (_chip.Id != 0)
{
    <section>
        <PropertyDisplay PropertyName="ID" PropertyValue="@(_chip.Id.ToString())" />
        <PropertyDisplay PropertyName="User E-mail" PropertyValue="@(_chip.Id.ToString())" /> <!-- TODO: Display User E-mail -->
        <PropertyDisplay PropertyName="Valid From" PropertyValue="@(_chip.DateFrom.ToString())" />
        <PropertyDisplay PropertyName="Valid To" PropertyValue="@(_chip.DateTo.ToString())" />
        <PropertyDisplay PropertyName="Company" PropertyValue="@(_chip.Company.Name)" />
        <PropertyDisplay PropertyName="Company Phone Number" PropertyValue="@(_chip.Company.PhoneNumber)" />
        <PropertyDisplay PropertyName="Event" PropertyValue="@(_chip.Company.PhoneNumber)" />
        <PropertyDisplay PropertyName="Group" PropertyValue="@(_chip.Company.PhoneNumber)" />
        @*<div>Products</div>
        <div>
            @foreach (var item in _chip.StandProducts)
            {
                <span>@item.Name</span>
            }
        </div>*@
    </section>
}


@code {
    // TODO: Display User Email
    // TODO: Display Product Contents
    [Parameter]
    public string ChipId { get; set; }

    private ChipModel _chip = new ChipModel();
    private string _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ChipRepository chipRepo = new ChipRepository();
            _chip = await chipRepo.GetById(Convert.ToInt32(ChipId));
        }
        catch (Exception ex)
        {
            _errorMessage = "There was an error while fetching data.";
            Console.WriteLine(ex);
        }
    }
}
