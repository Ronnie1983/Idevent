@page "/AddChip"
@using IdeventLibrary.Repositories
@inject IJSRuntime JSRuntime
@inject CompanyRepository _companyRepository
@inject ChipRepository _chipRepository
@inject EventRepository _eventRepository

<h1>Add Chip</h1>
@if (_displayMessage is not null)
{
    @_displayMessage
    // _displayMessage is a RenderFragment
}

<EditForm Model="_chip" OnValidSubmit="HandleValidSubmitChip">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Chip UID</label>
        <InputTextFocusable id="inputChipUID" @ref=_chipUIDInput @bind-Value=_chip.HashedId class="form-control" />
    </div>
    <div class="form-group mt-2">
        <label>Validity Period:</label>
        <div>
            <div class="d-inline-block">
                <label class="">From</label><br />
                <InputDate @bind-Value=_chip.ValidFrom class="form-control" />
            </div>
            <span>-</span>
            <div class="d-inline-block">
                <label>To</label><br />
                <InputDate @bind-Value=_chip.ValidTo class="form-control" />
            </div>
        </div>
    </div>
    @* <div class="form-group"> // TODO: Add user email input when adding chip.
        <label>User E-mail</label>
        <InputText class="form-control disabled" @bind-Value=_chip.User.Email/>
        </div>*@

    <SelectCompany OnChangeCallback=SelectCompanyAndShowEventSelection Companies=_companies />
    @if (_companyEvents != null)
    {
        <SelectEvent OnChangeCallback=SelectEventAndShowChipSettings Events=_companyEvents />
    }

    @*   <div class="form-group">
        <label>Choose event (optional)</label>
        </div>
        <div class="form-group">
        <label>text</label>
        - Group
        </div>
        <div class="form-group">
        <label>text</label>
        - Event products
        </div>
        <div class="form-group">
        <label>text</label>
        </div>*@

    <button type="submit" class="btn btn-primary">Submit</button>
    <NavigateButton PageToNavigateTo="Chips" ButtonText="Cancel" HtmlClasses="btn btn-danger m-1" />
</EditForm>




@code {
    private ChipModel _chip = new ChipModel();
    private InputTextFocusable _chipUIDInput;
    private List<CompanyModel> _companies = new List<CompanyModel>();
    private List<EventModel> _companyEvents;
    private RenderFragment _displayMessage;

    protected override async Task OnInitializedAsync()
    {
        _chip = new ChipModel()
            {
                HashedId = "",
                ValidFrom = DateTimeOffset.Now,
                ValidTo = DateTimeOffset.Now.AddDays(5),
            };
        _companies = await _companyRepository.GetAllAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _chipUIDInput.FocusAsync();
        }
    }
    private void SelectCompanyAndShowEventSelection(ChangeEventArgs e)
    {
        int selectedValue = Convert.ToInt32(e.Value);
        _chip.Company = _companies.Find(company => company.Id == selectedValue);
        _companyEvents = _eventRepository.GetAllByCompanyId(selectedValue);
        // TODO: Retrieve events connected to the selected company.
    }
    private void SelectEventAndShowChipSettings()
    {

    }
    private async Task HandleValidSubmitChip()
    {
        try
        {
            ChipModel submittedModel = await _chipRepository.CreateAsync(_chip);
            if (submittedModel is null)
            {
                _displayMessage = MakeDisplayMessage("Failed to create chip.", true);

                return;
            }

            _displayMessage = MakeDisplayMessage($"{_chip.HashedId} was created.", false);
            _chip.HashedId = "";
            await _chipUIDInput.FocusAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _displayMessage = MakeDisplayMessage($"Failed to create chip. {e.Message}", true);
        }


    }
    /// <summary>
    /// Makes a RenderFragment with a div.alert that is either success or danger.
    /// </summary>
    /// <param name="message"></param>
    /// <param name="isError"></param>
    /// <returns></returns>
    private static RenderFragment MakeDisplayMessage(string message, bool isError)
    {
        if (isError)
        {
            return
    @<div class="alert alert-danger">@message</div>;
        }

        return @<div class="alert alert-success">@message</div>;
    }
}
