@page "/AddChip"
@using IdeventLibrary.Repositories
@inject IJSRuntime JSRuntime
@inject CompanyRepository companyRepository
@inject ChipRepository chipRepository

<h1>Add Chip</h1>
@_displayMessage @* _displayMessage is a RenderFragment *@

<EditForm Model="_chip" OnValidSubmit="HandleValidSubmitChip" OnInvalidSubmit="HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Chip UID</label>
        <InputTextFocusable id="inputChipUID" @ref=_chipUIDInput @bind-Value=_chip.HashedId class="form-control" />
    </div>
    <div class="form-group mt-2">
        <label>Validity Period:</label>
        <div>
            <div class="d-inline-block">
                <label class="">From</label><br />
                <InputDate @bind-Value=_chip.ValidFrom class="form-control" />
            </div>
            <span>-</span>
            <div class="d-inline-block">
                <label>To</label><br />
                <InputDate @bind-Value=_chip.ValidTo class="form-control" />
            </div>
        </div>
    </div>
    @* <div class="form-group"> // TODO: Add user email input when adding chip.
        <label>User E-mail</label>
        <InputText class="form-control disabled" @bind-Value=_chip.User.Email/>
        </div>*@
    @if (_companies is not null)
    {
        <div class="form-group">
            <label>Company</label>
            <InputSelect @bind-Value=_selectedCompany.Id class="form-control" @onchange="@SelectCompanyAndShowEventSelection">

                <option value="0" selected>Select company</option>

                @foreach (CompanyModel company in _companies)
                {
                <option value=@company.Id>@company.Name</option>
                }
        </InputSelect>
    </div>
    }

    @*   <div class="form-group">
        <label>Choose event (optional)</label>
        </div>
        <div class="form-group">
        <label>text</label>
        - Group
        </div>
        <div class="form-group">
        <label>text</label>
        - Event products
        </div>
        <div class="form-group">
        <label>text</label>
        </div>*@

    <button type="submit" class="btn btn-primary">Submit</button>
    <NavigateButton PageToNavigateTo="Chips" ButtonText="Cancel" HtmlClasses="btn btn-danger m-1" />
</EditForm>




@code {
    private ChipModel _chip;
    private InputTextFocusable _chipUIDInput;
    private List<CompanyModel> _companies;
    private RenderFragment _displayMessage;
    private CompanyModel _selectedCompany = new CompanyModel();

    protected override async Task OnInitializedAsync()
    {
        _chip = new ChipModel()
            {
                HashedId = "",
                ValidFrom = DateTimeOffset.Now,
                ValidTo = DateTimeOffset.Now.AddDays(5),
            };
        _companies = await companyRepository.GetAllAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _chipUIDInput.FocusAsync();
        }
    }
    private void SelectCompanyAndShowEventSelection()
    {
        _chip.Company = _selectedCompany;
        // TODO: Retrieve events connected to the selected company.
    }
    private async Task HandleValidSubmitChip()
    {
        // TODO: create chip
        ChipModel submittedModel = await chipRepository.CreateAsync(_chip);
        if (submittedModel is null)
        {
            _displayMessage = MakeDisplayMessage("Failed to create chip.", true);

            return;
        }

        _displayMessage = MakeDisplayMessage($"{_chip.HashedId} was created (not implemented)", false);
        _chip.HashedId = "";
        await _chipUIDInput.FocusAsync();

    }
    private void HandleInvalidSubmit()
    {
        // Temporary hack. TODO: fix @onchange SelectCompanyAndShowEventSelection
        Console.WriteLine(_selectedCompany.Id);
        _chip.Company = _selectedCompany;
    }
    /// <summary>
    /// Makes a RenderFragment with a div.alert that is either success or danger.
    /// </summary>
    /// <param name="message"></param>
    /// <param name="isError"></param>
    /// <returns></returns>
    private RenderFragment MakeDisplayMessage(string message, bool isError)
    {
        if (isError)
        {
            return @<div class="alert alert-danger">@message</div>;
        }

        return @<div class="alert alert-success">@message</div>;
    }
}
