@page "/AddChip"
@using IdeventLibrary.Repositories
@inject IJSRuntime JSRuntime
@inject CompanyRepository _companyRepository
@inject ChipRepository _chipRepository
@inject EventRepository _eventRepository
@inject ChipGroupRepository _chipGroupRepository
@inject StandProductRepository _productRepository
@inject ChipContentRepository _chipContentRepository

<h1>Add Chip</h1>
@if (_displayMessage is not null)
{
    @_displayMessage
    // _displayMessage is a RenderFragment
}

<EditForm Model="_chip" OnValidSubmit="HandleValidSubmitChip">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Chip UID</label>
        <InputTextFocusable id="inputChipUID" @ref=_chipUIDInput @bind-Value=_chip.HashedId class="form-control" />
    </div>
    <div class="form-group mt-2">
        <label>Validity Period:</label>
        <div>
            <div class="d-inline-block">
                <label class="">From</label><br />
                <InputDate @bind-Value=_chip.ValidFrom class="form-control" />
            </div>
            <span>-</span>
            <div class="d-inline-block">
                <label>To</label><br />
                <InputDate @bind-Value=_chip.ValidTo class="form-control" />
            </div>
        </div>
    </div>
    @* <div class="form-group"> // TODO: Add user email input when adding chip.
        <label>User E-mail</label>
        <InputText class="form-control disabled" @bind-Value=_chip.User.Email/>
        </div>*@

    <SelectCompany OnChangeCallback=SelectCompanyAndShowEventSelection Companies=_companies />

    @if (_chip.Company != null)
    {
        <SelectEvent OnChangeCallback=SelectEventAndShowChipSettings Events=_companyEvents />
    }

    @if (_chip.Event != null && _chip.StandProducts != null)
    {
        <div class="row">
            <label class="largeLabel">Select existing group or create a new one</label>
            <div class="col-md-6">
                <div class="form-group">
                    <SelectGroup OnChangeCallback=UpdateProductAmountsBasedOnGroup ChipGroups=_eventGroups />
                    <button id="openNewGroupPanelBtn" type="button" class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#makeNewGroupPanel" aria-expanded="true" aria-controls="collapseOne">Create new group</button>
                    <div id="makeNewGroupPanel" class="collapse">
                        <label>New group name</label>
                        <InputText class="form-control" @bind-Value="_newChipGroup.Name" placeholder="New group name" />
                        <button id="createGroupBtn" type="button" @onclick="CreateGroup" class="btn btn-primary">Create group</button>
                        <button id="closeNewGroupPanelBtn" type="button" data-bs-toggle="collapse" data-bs-target="#makeNewGroupPanel" class="btn btn-warning">Close</button>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <label class="largeLabel">Choose products on chip</label>
                @if (_chip.StandProducts.Count == 0)
                {
                    <p>There are not any products associated with the selected event.</p>
                }
                else
                {
                    <table class="text-center">
                        <thead>
                            <tr>
                                <th>Event product</th>
                                <th>-</th>
                                <th>Amounts</th>
                                <th>+</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in _chip.StandProducts)
                            {
                                <tr>
                                    <td>@product.Name</td>
                                    <td class="px-2">
                                        <button type="button" class="bg-danger fw-bold customCircleBtn" @onclick="() => {if(product.Amount >0){product.Amount--;}}">-</button>
                                    </td>
                                    <td><input type="number" class="text-center" value="@product.Amount" /></td>
                                    <td class="px-2">
                                        <button type="button" class="bg-success fw-bold customCircleBtn" @onclick="() => {product.Amount++;}">+</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    }

    <button type="submit" class="btn btn-primary">Submit</button>
    <NavigateButton PageToNavigateTo="Chips" ButtonText="Cancel" HtmlClasses="btn btn-danger m-1" />
</EditForm>


@code {
    private ChipModel _chip = new ChipModel(){HashedId="", ValidFrom=DateTimeOffset.Now, ValidTo=DateTimeOffset.Now.AddDays(5)};
    private InputTextFocusable _chipUIDInput;
    private List<CompanyModel> _companies = new List<CompanyModel>();
    private List<EventModel> _companyEvents;
    private RenderFragment _displayMessage;
    private List<ChipGroupModel> _eventGroups;
    private ChipGroupModel _newChipGroup = new ChipGroupModel();
    private bool _showMakeNewGroup = false;

    protected override async Task OnInitializedAsync()
    {
        _companies = await _companyRepository.GetAllAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _chipUIDInput.FocusAsync();
        }
    }
    private async Task SelectCompanyAndShowEventSelection(ChangeEventArgs e)
    {
        int selectedValue = Convert.ToInt32(e.Value);
        _chip.Company = _companies.Find(company => company.Id == selectedValue);
        _companyEvents = await _eventRepository.GetAllByCompanyIdAsync(selectedValue);
    }
    private async Task SelectEventAndShowChipSettings(ChangeEventArgs e)
    {
        try
        {
            int selectedEventId = Convert.ToInt32(e.Value);
            if (_companyEvents == null)
            {
                _displayMessage = Common.Helpers.MakeDisplayMessage("Something went wrong when fetching events associated with the selected company.", true);
                return;
            }
            _chip.Event = _companyEvents.Find(companyEvent => companyEvent.Id == selectedEventId);

            _eventGroups = await _chipGroupRepository.GetAllByEventIdAsync(selectedEventId);
            _chip.Group = new ChipGroupModel();

            _chip.StandProducts = await _productRepository.GetAllProductsByEventIdAsync(selectedEventId);
        }
        catch (Exception ex)
        {
            _displayMessage = Common.Helpers.MakeDisplayMessage(ex.Message, true);
        }
    }
    private async Task HandleValidSubmitChip()
    {
        try
        {
            bool success = true;
            ChipModel submittedModel = await _chipRepository.CreateAsync(_chip);

            if (submittedModel is null)
            {
                _displayMessage = Common.Helpers.MakeDisplayMessage("Failed to create chip.", true);
                return;
            }
            _chip.Id = submittedModel.Id;
            if (_chip.StandProducts != null)
            {
                success = await _chipContentRepository.CreateMultipleAsync(_chip.StandProducts, _chip.Id, _chip.Group.Id);
                if (success == false)
                {
                    _displayMessage = Common.Helpers.MakeDisplayMessage($"{_chip.HashedId} was created, but without content.", true);
                    _chip.HashedId = "";
                    await _chipUIDInput.FocusAsync();
                    return;
                }
            }

            _displayMessage = Common.Helpers.MakeDisplayMessage($"{_chip.HashedId} was created. Chip id: {_chip.Id}", false);
            _chip.HashedId = "";
            await _chipUIDInput.FocusAsync();
            // TODO: Make it 'save' (in-memory) the previous entrys products
            //List<StandProductModel> previousEntrysProducts = _chip.StandProducts;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _displayMessage = Common.Helpers.MakeDisplayMessage($"Failed to create chip. {e.Message}", true);
        }
    }
    private void UpdateProductAmountsBasedOnGroup(ChangeEventArgs e)
    {
        int selectedGroupId = Convert.ToInt32(e.Value);
        if (selectedGroupId != 0)
        {
            _chip.Group = _eventGroups.Find(x => x.Id == selectedGroupId);
        }
        else
        {
            _chip.Group = new ChipGroupModel();
        }
    }

    private async Task CreateGroup()
    {
        try
        {
            _newChipGroup.EventId = _chip.Event.Id;
            ChipGroupModel newlyCreatedGroup = await _chipGroupRepository.CreateAsync(_newChipGroup);
            if (newlyCreatedGroup == null)
            {
                throw new NullReferenceException("newlyCreatedGroup is null. Check if CreateAsync() in ChipGroupRepository works.");
            }
            _displayMessage = Common.Helpers.MakeDisplayMessage($"Created the chip group: {_newChipGroup.Name} successfully.", false);
            _eventGroups.Add(newlyCreatedGroup);
        }
        catch (Exception ex)
        {
            _displayMessage = Common.Helpers.MakeDisplayMessage($"Failed to create new group. {ex.Message}", true);
        }
    }
}
