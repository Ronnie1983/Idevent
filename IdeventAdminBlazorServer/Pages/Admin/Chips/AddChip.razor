@page "/AddChip"
@using IdeventLibrary.Repositories
@inject IJSRuntime JSRuntime
@inject CompanyRepository _companyRepository
@inject ChipRepository _chipRepository
@inject EventRepository _eventRepository
@inject ChipGroupRepository _chipGroupRepository

<h1>Add Chip</h1>
@if (_displayMessage is not null)
{
    @_displayMessage
    // _displayMessage is a RenderFragment
}

<EditForm Model="_chip" OnValidSubmit="HandleValidSubmitChip">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Chip UID</label>
        <InputTextFocusable id="inputChipUID" @ref=_chipUIDInput @bind-Value=_chip.HashedId class="form-control" />
    </div>
    <div class="form-group mt-2">
        <label>Validity Period:</label>
        <div>
            <div class="d-inline-block">
                <label class="">From</label><br />
                <InputDate @bind-Value=_chip.ValidFrom class="form-control" />
            </div>
            <span>-</span>
            <div class="d-inline-block">
                <label>To</label><br />
                <InputDate @bind-Value=_chip.ValidTo class="form-control" />
            </div>
        </div>
    </div>
    @* <div class="form-group"> // TODO: Add user email input when adding chip.
        <label>User E-mail</label>
        <InputText class="form-control disabled" @bind-Value=_chip.User.Email/>
        </div>*@

    <SelectCompany OnChangeCallback=SelectCompanyAndShowEventSelection Companies=_companies />

    @if (_chip.Company != null)
    {
        <SelectEvent OnChangeCallback=SelectEventAndShowChipSettings Events=_companyEvents />
    }

    @if (_chip.Event != null && _chip.StandProducts != null)
    {
        <div class="form-group">
            <label>New group</label>
            <InputText @bind-Value="_chip.Group.Name" />
            <SelectGroup OnChangeCallback=UpdateProductAmountsBasedOnGroup ChipGroups=_eventGroups />
        </div>
        <table>
            <thead>
                <tr>
                    <th>Event product</th>
                    <th>-</th>
                    <th>Amounts</th>
                    <th>+</th>
                </tr>
            </thead>
            <tbody>

                @foreach (var item in _chip.StandProducts)
                {
                    <tr>
                        <td>@item.Name</td>
                        <td><button type="button" class="bg-danger">-</button></td>
                        <td>@item.Amount</td>
                        <td><button type="button" class="bg-success">+</button></td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <button type="submit" class="btn btn-primary">Submit</button>
    <NavigateButton PageToNavigateTo="Chips" ButtonText="Cancel" HtmlClasses="btn btn-danger m-1" />
</EditForm>


@code {
    private ChipModel _chip = new ChipModel();
    private InputTextFocusable _chipUIDInput;
    private List<CompanyModel> _companies = new List<CompanyModel>();
    private List<EventModel> _companyEvents;
    private RenderFragment _displayMessage;
    private List<ChipGroupModel> _eventGroups;

    protected override async Task OnInitializedAsync()
    {
        _chip = new ChipModel()
            {
                HashedId = "",
                ValidFrom = DateTimeOffset.Now,
                ValidTo = DateTimeOffset.Now.AddDays(5),
            };
        _companies = await _companyRepository.GetAllAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _chipUIDInput.FocusAsync();
        }
    }
    private async Task SelectCompanyAndShowEventSelection(ChangeEventArgs e)
    {
        int selectedValue = Convert.ToInt32(e.Value);
        _chip.Company = _companies.Find(company => company.Id == selectedValue);
        _companyEvents = await _eventRepository.GetAllByCompanyIdAsync(selectedValue);
    }
    private async Task SelectEventAndShowChipSettings(ChangeEventArgs e)
    {
        try
        {
            int selectedValue = Convert.ToInt32(e.Value);
            if (_companyEvents == null)
            {
                _displayMessage = Common.Helpers.MakeDisplayMessage("Something went wrong when fetching events associated with the selected company.", true);
                return;
            }
            _chip.Event = _companyEvents.Find(companyEvent => companyEvent.Id == selectedValue);

            _eventGroups = await _chipGroupRepository.GetAllByEventIdAsync(selectedValue);
            _chip.Group = new ChipGroupModel();
            // Temporary static data
            // TODO: Fetch all stand products available for an event.
            _chip.StandProducts = new List<StandProductModel>()
        {
            new StandProductModel("Vand", 5, new EventStandModel()),
            new StandProductModel("Sandwich", 5, new EventStandModel()),
            new StandProductModel("Mars chokoladebar", 5, new EventStandModel()),
            new StandProductModel("Sneakers chokoladebar", 5, new EventStandModel()),
            new StandProductModel("Twix chokoladebar", 5, new EventStandModel()),
            new StandProductModel("Sodavand", 5, new EventStandModel()),
            new StandProductModel("Tuborg Classic", 5, new EventStandModel()),
            new StandProductModel("Vin", 5, new EventStandModel()),
          };
        }
        catch (Exception ex)
        {
            _displayMessage = Common.Helpers.MakeDisplayMessage(ex.Message, true);
        }
    }
    private async Task HandleValidSubmitChip()
    {
        try
        {
            ChipModel submittedModel = await _chipRepository.CreateAsync(_chip);
            if (submittedModel is null)
            {
                _displayMessage = Common.Helpers.MakeDisplayMessage("Failed to create chip.", true);

                return;
            }

            _displayMessage = Common.Helpers.MakeDisplayMessage($"{_chip.HashedId} was created.", false);
            _chip.HashedId = "";
            await _chipUIDInput.FocusAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _displayMessage = Common.Helpers.MakeDisplayMessage($"Failed to create chip. {e.Message}", true);
        }
    }
    private void UpdateProductAmountsBasedOnGroup(ChangeEventArgs e)
    {
        int selectedGroupId = Convert.ToInt32(e.Value);
        if (selectedGroupId != 0)
        {
            _chip.Group = _eventGroups.Find(x => x.Id == selectedGroupId);
        }

        // TODO: update the amounts shown for products.
    }

}
