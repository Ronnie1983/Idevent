@page "/CompanyEdit/{CompanyId}"

@attribute [Authorize]
@using IdeventLibrary
@using IdeventLibrary.Repositories
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity

@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider

<h1>Edit Company</h1>

<EditForm Model="@_companyReq" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div class="col-12 p-2">
            <AuthorizeView Context="Auth" Roles="@Enums.Roles.SuperAdmin.ToString()">
                <div class="form-group">
                    <label for="@_companyReq.Active">Is active</label>
                    <InputCheckbox @bind-Value="_companyReq.Active"></InputCheckbox>
                </div>
            </AuthorizeView>

            <div class="form-group">
                <label for="@_companyReq.Name">Name</label>
                <InputText class="form-control" id="name" @bind-Value="_companyReq.Name" placeholder="Company name" />
            </div>
            <div class="form-group">
                <label for="@_companyReq.Email">Email</label>
                <InputText class="form-control" id="email" @bind-Value="_companyReq.Email" placeholder="Company Email" />
            </div>
            <div class="form-group">
                <label for="@_companyReq.CVR">CVR</label>
                <InputText class="form-control" id="cvr" @bind-Value="_companyReq.CVR" placeholder="CVR" />
            </div>
            <div class="form-group">
                <label for="@_companyReq.PhoneNumber">Phone</label>
                <InputText class="form-control" id="phone" @bind-Value="_companyReq.PhoneNumber" placeholder="Phone number" />
            </div>
             @if (_companyReq.Address != null)
            {
                <div class="form-group">
                    <label for="@_companyReq.Address.StreetAddress">Street</label>
                    <InputText class="form-control" id="address_street" @bind-Value="_companyReq.Address.StreetAddress" placeholder="Street and number" />
                </div>
                <div class="form-group">
                    <label for="@_companyReq.Address.City">City</label>
                    <InputText class="form-control" id="address_city" @bind-Value="_companyReq.Address.City" placeholder="City" />
                </div>
                <div class="form-group">
                    <label for="@_companyReq.Address.PostalCode">Zipcode</label>
                    <InputText class="form-control" id="address_postal" @bind-Value="_companyReq.Address.PostalCode" placeholder="Postal" />
                </div>
                <div class="form-group">
                    <label for="@_companyReq.Address.Country">Country</label>
                <InputText class="form-control" id="address_country" @bind-Value="_companyReq.Address.Country" placeholder="Country" />
                </div>
            }
            else
            {
                 <div class="col-4 m-2">
                <button type="button" class="btn-info" @onclick="()=>{AddAddress();}">"Add Address</button>
            </div>
            }
        </div>

        @if (_companyReq.InvoiceAddress != null)
        {

            <div class="col-12 border bg-light p-2">
                <h4>Seperated Invoice address</h4>
                <div class="form-group">
                    <label for="@_companyReq.InvoiceAddress.StreetAddress">Street</label>
                    <InputText class="form-control" id="address_street" @bind-Value="_companyReq.InvoiceAddress.StreetAddress" placeholder="Street and number" />
                </div>
                <div class="form-group">
                    <label for="@_companyReq.InvoiceAddress.City">City</label>
                    <InputText class="form-control" id="address_city" @bind-Value="_companyReq.InvoiceAddress.City" placeholder="City" />
                </div>
                <div class="form-group">
                    <label for="@_companyReq.InvoiceAddress.PostalCode">Zipcode</label>
                    <InputText class="form-control" id="address_postal" @bind-Value="_companyReq.InvoiceAddress.PostalCode" placeholder="Postal" />
                </div>
                <div class="form-group">
                    <label for="@_companyReq.InvoiceAddress.Country">Country</label>
                    <InputText class="form-control" id="address_country" @bind-Value="_companyReq.InvoiceAddress.Country" placeholder="Country" />
                </div>
            </div>

        }
        else
        {
            <div class="col-4">
                <button type="button" class="btn-info" @onclick="()=>{AddInvoiceAddress();}">"Add Invoice Address</button>
            </div>

        }
    </div>

    <button class="btn btn-primary m-1" type="submit">Submit</button>
    <NavigateButton PageToNavigateTo="Companies/" ButtonText="Cancel" HtmlClasses="btn-danger" />

</EditForm>


@code {

    [Parameter]
    public string CompanyId { get; set; }

    private CompanyModel _companyReq;
    private CompanyRepository _companyRepository = new CompanyRepository();
    //private AddressRepository _addressRepository = new AddressRepository();

    protected override async Task OnInitializedAsync()
    {
        _companyReq = new CompanyModel();
        _companyReq = await _companyRepository.GetAsync(Convert.ToInt32(CompanyId));
    }

    private async Task HandleValidSubmit()
    {

        var result = await _companyRepository.UpdateAsync(_companyReq);
        if (result != null)
        {
            _navigationManager.NavigateTo("Companies");
        }
        // TODO: add submit company

    }

    private string NavigationArgument(string navigationPrefix, int modelId)
    {
        return $"{navigationPrefix}{modelId}";
    }
    private void AddAddress()
    {
        _companyReq.Address = new AddressModel();
        StateHasChanged();
    }
    private void AddInvoiceAddress()
    {
        _companyReq.InvoiceAddress = new AddressModel();
        StateHasChanged();
    }
}
