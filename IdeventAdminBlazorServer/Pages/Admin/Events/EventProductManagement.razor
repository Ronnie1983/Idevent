@using IdeventLibrary.Repositories

@page "/EventProductManagement/{EventId}"
<h1>Event Product Management</h1>
<h3>@_eventModel.Name</h3>



@*<NavigateButton PageToNavigateTo="AddStand/{EventId}" ButtonText="Add stand to event"/>*@

<div class="row">
    <div class="col-2">
    <NavigateButton PageToNavigateTo="Events" ButtonText="Back" />
    <button id="toggleAddStandBtn" class="btn btn-info m-1" @onclick="() => ToggleAddStand()">New stand</button>

    </div>
            @if (_toggleAddStand)
            {
                <div id="addStandContainer" class="col-10 row">
                    <EditForm class="row" Model="@_eventStandReq" OnValidSubmit="@HandleValidSubmitEventStand">
                            <DataAnnotationsValidator/>
                            <ValidationSummary/>
                             <div class="form-group col-4">
                                    <label for="@_eventStandReq.Name">Stand Name</label> 
                                    <InputText class="form-control" id="name" @bind-Value="_eventStandReq.Name" placeholder="Stand Name"/>
                                </div>
                                <div class="form-group col-4">
                                    <label for="@_eventStandReq.standProducts">Group</label> 
                                    <InputSelect class="form-control" id="value" @bind-Value="_bindItem">
                                        @foreach(StandFunctionalityModel item in _standFunctionalities){
                                                <option value="@item.Id">@item.Name</option>
                                         }
                                    </InputSelect>
                                </div>

                                <button class="btn btn-primary m-1 col-2" type="submit">Submit</button>
                                   
                          </EditForm>
                </div>

            }
</div>

<div>
    <table class="table table-hover" style="text-align: center">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Functionality</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
        @foreach(EventStandModel stand in _eventModel.EventStands){
            
            
            <tr>   
                <td>@stand.Name</td>
                <td>@stand.Functionality.Name</td>
                <td>
                    <div class="btn-group">
                        <button class="btn btn-primary m-1" @onclick="() => ToggleEditContent(stand.Name)">Edit content</button>
                        <button class="btn btn-danger m-1" @onclick="@(e => DeleteStandAndContent(stand))">Delete</button>
                    </div>
                </td>
            </tr>
                @if (_listOfOpenedStands.Contains(stand.Name))
                {
                    <tr class="table-danger">
                        <td>
                            <div class="w-50 m-auto">
                                <label>New stand name</label> 
                                <input class="form-control" id="name" @bind="_newStandName" placeholder="Name"/>
                                <button class="btn btn-primary m-1" @onclick="@(e=>ChangeName(stand))">Update stand name</button>
                            </div>
                        </td>
                        <td>
                            <table class="w-100">
                                <thead>
                                    <tr>
                                        <td>Product</td>
                                        <td>Value</td>
                                        <td></td>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach(StandProductModel product in stand.standProducts){
                                          <tr>
                                              <td>@product.Name</td>
                                              <td>@product.Value</td>
                                              <td><button class="btn btn-danger m-1" @onclick="@(e=>DeleteProduct(stand, product))">D</button></td>
                                         </tr>
                                    }
                                  
                              </tbody>
                              
                          </table>
                      </td>
                      <td>
                          <EditForm Model="@_standProductReq" OnValidSubmit="@(e => HandleValidSubmitProduct(stand))" class="w-50 m-auto">
                            <DataAnnotationsValidator/>
                            <ValidationSummary/>
                             <div class="form-group">
                                    <label for="@_standProductReq.Name">Name</label> 
                                    <InputText class="form-control" id="name" @bind-Value="_standProductReq.Name" placeholder="Product name"/>
                                </div>
                                <div class="form-group">
                                    <label for="@_standProductReq.Value">Value</label> 
                                    <InputNumber class="form-control" id="value" @bind-Value="_standProductReq.Value" placeholder="Value"/>
                                </div>

                                <button class="btn btn-primary m-1" type="submit">Submit</button>
                                   
                          </EditForm>
                      </td>
                    </tr>
                }
                
       
        }
         </tbody>
    </table>
</div>

@code {
    [Parameter]
    public string EventId { get; set; }
    public EventModel _eventModel = new EventModel();
    private bool _toggleAddStand = false;
    private List<string> _listOfOpenedStands = new List<string>();

    private StandProductModel _standProductReq = new StandProductModel();
    private int _bindItem;

    private EventStandModel _eventStandReq = new EventStandModel();
    private List<StandFunctionalityModel> _standFunctionalities = new List<StandFunctionalityModel>();
    private string _newStandName;
    private StandProductRepository _standProductRepository = new StandProductRepository();
    private EventRepository _eventRepository = new EventRepository();
    private EventStandRepository _eventStandRepository = new EventStandRepository();
    private StandFunctionalityRepository _standFunctionalityRepository = new StandFunctionalityRepository();

    protected override async Task OnInitializedAsync()
    {

        _eventModel = await _eventRepository.GetByIdAsync(TryConvert(EventId));
        _eventModel.EventStands = await _eventStandRepository.GetAllByEventIdAsync(TryConvert(EventId));
        _standFunctionalities = await _standFunctionalityRepository.GetAll();
        foreach(var s in _eventModel.EventStands)
        {
            s.standProducts = await _standProductRepository.GetAllProductsByStandIdAsync(s.Id);

        }
        //_eventStandReq.NewStandFuncName = _standFunctionalities[0];

    }

    private int TryConvert(string value)
    {
        int result = 0;
        try
        {
            result = Int32.Parse(value);

        }
        catch
        {
            Console.WriteLine("Unable to parse " + value);

        }
        return result;
    }

    private async void DeleteStandAndContent(EventStandModel stand)
    {

        var result = await _eventStandRepository.DeleteAsync(stand.Id);
        if (result.IsSuccessStatusCode)
        {
            _eventModel.EventStands.Remove(stand);
            StateHasChanged();
        }
        // TODO Delete Stand and content
    }

    private async void DeleteProduct(EventStandModel stand,StandProductModel product)
    {
        var result = await _standProductRepository.DeleteAsync(product.Id);
        if (result.IsSuccessStatusCode)
        {

            var item = _eventModel.EventStands.Find(x => x.Id == stand.Id).standProducts.Find(p => p.Id == product.Id);
            _eventModel.EventStands.Find(x => x.Id == stand.Id).standProducts.Remove(item);
            StateHasChanged();
        }

        // TODO Delete Product
    }

    private async Task HandleValidSubmitProduct(EventStandModel eventStand)
    {
        _standProductReq.EventStandModel = eventStand;
        var result = await _standProductRepository.CreateAsync(_standProductReq);
        if (result != null)
        {
            _eventModel.EventStands.Find(x => x.Id == eventStand.Id).standProducts.Add(result);
            _standProductReq = new StandProductModel();
        }
    }

    private async Task HandleValidSubmitEventStand()
    {
        _eventStandReq.Event = _eventModel;
        _eventStandReq.Functionality = _standFunctionalities.Find(x => x.Id == _bindItem);
        var result = await _eventStandRepository.CreateAsync(new EventStandModel(_eventStandReq.Name,_eventStandReq.Event, _eventStandReq.Functionality));
        if(result != null)
        {
            _eventModel.EventStands.Add(result);
            _eventStandReq = new EventStandModel();
        }
    }

    private async Task ChangeName(EventStandModel stand)
    {
        _eventModel.EventStands.Find(x => x.Id == stand.Id).Name = _newStandName;
        await _eventStandRepository.UpdateNameAsync(stand, _newStandName);
    }

    private void ToggleAddStand()
    {
        _toggleAddStand = !_toggleAddStand;
        if (_standFunctionalities.Count <= 0)
        {
            _bindItem = 1; // if no functionalties exists just set the id to 1. (
            return;
        }
        _bindItem = _standFunctionalities[0].Id; // TODO: causes error if no functionalities in database.
    }

    private void ToggleEditContent(string name)
    {
        if (_listOfOpenedStands.Contains(name))
        {
            _listOfOpenedStands.Remove(name);

        } else
        {
            _listOfOpenedStands.Add(name);

        }
        
    }
}
