@using IdeventLibrary.Repositories

@page "/EventProductManagement/{EventId}"
<h1>Event Product Management</h1>
<h3>@_eventModel.Name</h3>



@*<NavigateButton PageToNavigateTo="AddStand/{EventId}" ButtonText="Add stand to event"/>*@

<div class="row">
    <div class="col-2">
    <button class="btn btn-info m-1" @onclick="() => ToggleAddStand()">New stand</button>

    </div>
            @if (_toggleAddStand)
            {
                <div class="col-10 row">
                    <EditForm class="row" Model="@_eventStandReq" OnValidSubmit="@HandleValidSubmitEventStand">
                            <DataAnnotationsValidator/>
                            <ValidationSummary/>
                             <div class="form-group col-4">
                                    <label for="@_eventStandReq.Name">Stand Name</label> 
                                    <InputText class="form-control" id="name" @bind-Value="_eventStandReq.Name" placeholder="Stand Name"/>
                                </div>
                                <div class="form-group col-4">
                                    <label for="@_eventStandReq.standProducts">Group</label> 
                                    <InputSelect class="form-control" id="value" @bind-Value="_bindItem">
                                        @foreach(StandFunctionalityModel item in _standFunctionalities){
                                                <option value="@item.Id">@item.Name</option>
                                         }
                                    </InputSelect>
                                </div>

                                <button class="btn btn-primary m-1 col-2" type="submit">Submit</button>
                                   
                          </EditForm>
                </div>

            }
</div>

<div>
    <table class="table table-hover" style="text-align: center">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Functionality</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
        @foreach(EventStandModel stand in _eventModel.EventStands){
            
            
            <tr>   
                <td>@stand.Name</td>
                <td>@stand.Functionality.Name</td>
                <td>
                    <div class="btn-group">
                        <button class="btn btn-primary m-1" @onclick="() => Toggle(stand.Name)">Edit content</button>
                        <button class="btn btn-danger m-1" @onclick="@(e => DeleteStandAndContent(stand))">Delete</button>
                    </div>
                </td>
            </tr>
                @if (_stringList.Contains(stand.Name))
                {
                    <tr class="table-danger">
                        <td>
                            <label>New name</label> 
                            <input class="form-control" id="name" @bind="_newName" placeholder="Name"/>
                            <button class="btn btn-primary m-1" @onclick="@(e=>ChangeName(stand))">Chance</button></td>
                        <td>
                            <table>
                                <thead>
                                    <tr>
                                        <td>Product</td>
                                        <td>Value</td>
                                        <td></td>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach(StandProductModel product in stand.standProducts){
                                          <tr>
                                              <td>@product.Name</td>
                                              <td>@product.Value</td>
                                              <td><button class="btn btn-danger m-1" @onclick="@(e=>DeleteProduct(stand, product))">D</button></td>
                                         </tr>
                                    }
                                  
                              </tbody>
                              
                          </table>
                      </td>
                      <td>
                          <EditForm Model="@_standProductReq" OnSubmit="@(e => HandleValidSubmitProduct(stand))">
                            <DataAnnotationsValidator/>
                            <ValidationSummary/>
                             <div class="form-group">
                                    <label for="@_standProductReq.Name">Name</label> 
                                    <InputText class="form-control" id="name" @bind-Value="_standProductReq.Name" placeholder="Product"/>
                                </div>
                                <div class="form-group">
                                    <label for="@_standProductReq.Value">Value</label> 
                                    <InputNumber class="form-control" id="value" @bind-Value="_standProductReq.Value" placeholder="Value"/>
                                </div>

                                <button class="btn btn-primary m-1" type="submit">Submit</button>
                                   
                          </EditForm>
                      </td>
                    </tr>
                }
                
       
        }
         </tbody>
    </table>
</div>

@code {
    [Parameter]
    public string EventId { get; set; }
    public EventModel _eventModel = new EventModel();
    private bool _toggleAddStand = false;
    private List<string> _stringList = new List<string>();

    private StandProductModel _standProductReq = new StandProductModel();
    private int _bindItem;

    private EventStandModel _eventStandReq = new EventStandModel();
    private List<StandFunctionalityModel> _standFunctionalities = new List<StandFunctionalityModel>();
    private string _newName;
    private StandProductRepository _standProductRepository = new StandProductRepository();
    private EventRepository _eventRepository = new EventRepository();
    private EventStandRepository _eventStandRepository = new EventStandRepository();
    private StandFunctionalityRepository _standFunctionalityRepository = new StandFunctionalityRepository();

    protected override async Task OnInitializedAsync()
    {

        _eventModel = await _eventRepository.GetByIdAsync(TryConvert(EventId));
        _eventModel.EventStands = await _eventStandRepository.GetAllByEventIdAsync(TryConvert(EventId));
        _standFunctionalities = await _standFunctionalityRepository.GetAll();
        foreach(var s in _eventModel.EventStands)
        {
            s.standProducts = await _standProductRepository.GetAllProductsByStandIdAsync(s.Id);
            
        }
        //_eventStandReq.NewStandFuncName = _standFunctionalities[0];

    }

    private int TryConvert(string value)
    {
        int result = 0;
        try
        {
            result = Int32.Parse(value);

        }
        catch
        {
            Console.WriteLine("Unable to parse " + value);

        }
        return result;
    }

    private async void DeleteStandAndContent(EventStandModel stand)
    {
        _eventModel.EventStands.Remove(stand);
        await _eventStandRepository.DeleteAsync(stand.Id);
        // TODO Delete Stand and content
    }

    private async void DeleteProduct(EventStandModel stand,StandProductModel product)
    {
        _eventModel.EventStands.Find(x => x.Name == stand.Name).standProducts.Remove(product);
        // TODO Delete Product
    }

    private async Task HandleValidSubmitProduct(EventStandModel eventStand)
    {

        // TODO Måske bør dette element ikke være her. Snak med gruppe
        _eventModel.EventStands.Find(x => x.Name == eventStand.Name).standProducts.Add(_standProductReq);


        _standProductReq.EventStandModel = eventStand;
        await _standProductRepository.CreateAsync(_standProductReq);
        _standProductReq = new StandProductModel();
        // TODO add submit product


    }

    private async Task HandleValidSubmitEventStand()
    {
        _eventStandReq.Event = _eventModel;
        _eventStandReq.Functionality = _standFunctionalities.Find(x => x.Id == _bindItem);
        _eventModel.EventStands.Add(new EventStandModel(_eventStandReq.Name,_eventStandReq.Event, _eventStandReq.Functionality));
        await _eventStandRepository.CreateAsync(new EventStandModel(_eventStandReq.Name,_eventStandReq.Event, _eventStandReq.Functionality));
        _eventStandReq = new EventStandModel();
        // TODO add event stand to db
    }

    private async Task ChangeName(EventStandModel stand)
    {
        _eventModel.EventStands.Find(x => x.Name == stand.Name).Name = _newName;
        await _eventStandRepository.UpdateNameAsync(stand, _newName);
    }

    private void ToggleAddStand()
    {
        _toggleAddStand = !_toggleAddStand;
        _bindItem = _standFunctionalities[0].Id;
    }

    private void Toggle(string name)
    {
        if (_stringList.Contains(name))
        {
            _stringList.Remove(name);

        } else
        {
            _stringList.Add(name);

        }
        
    }
}
