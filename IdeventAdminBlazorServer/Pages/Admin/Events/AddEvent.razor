@page "/AddEvent"
@using IdeventLibrary
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject CompanyRepository companyRepository
@inject EventRepository eventRepository
@inject UserRepository _userRepository
@inject AuthenticationStateProvider _authenticationStateProvider


@attribute [Authorize(Roles = "SuperAdmin, Admin")]

<h1>Add Event</h1>
@if (_message != null)
{
    @_message
}
<EditForm Model="_event" OnValidSubmit="HandleValidEventSubmitAsync">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <div class="form-group">
        <label>Event name</label>
        <InputTextSetFocus class="form-control" placeholder="Eventnavn årgang 2022" @bind-Value=_event.Name />
    </div>
    <SelectCompany Companies=_companies OnChangeCallback=SelectCompany />

    <button type="submit" class="btn btn-primary m-4">Submit</button>
    <NavigateButton ButtonText="Back to events" PageToNavigateTo="Events" HtmlClasses="btn-secondary"></NavigateButton>
</EditForm>
@code {
    private EventModel _event = new EventModel();
    private List<CompanyModel> _companies;
    private RenderFragment _message;
    private UserModel _profileData;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationState authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
            ClaimsPrincipal userClaim = authState.User;
            UserModel user = await _userRepository.GetByClaim(userClaim);

            _profileData = await _userRepository.GetUserById(user.Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            _companies = new List<CompanyModel>();
            if (_profileData.Role != "SuperAdmin")
            {
                CompanyModel company = await companyRepository.GetAsync(_profileData.Company.Id);
                if (company != null)
                {
                    _companies.Add(company);
                }
            }
            else
            {
                _companies = await companyRepository.GetAllAsync();

            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex);
        }

    }

    private void SelectCompany(ChangeEventArgs e)
    {
        _event.Company = _companies.Find(x => x.Id == Convert.ToInt32(e.Value));
    }
    private async Task HandleValidEventSubmitAsync()
    {
        EventModel createdModel = await eventRepository.Create(_event);
        if (createdModel == null)
        {
            _message = Common.Helpers.MakeDisplayMessage("Failed to create event", true);
        }
        else
        {
            _message = Common.Helpers.MakeDisplayMessage($"{createdModel.Name} created", false);
        }
    }

}
