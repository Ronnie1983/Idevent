@using IdeventLibrary.Repositories;
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject EventStandRepository _eventStandRepository
@inject EventRepository _eventRepository
@inject UserRepository _userRepository
@inject AuthenticationStateProvider AuthenticationStateProvider

@page "/OperatorSite"

<h1>Operator's Site</h1>

<SelectEvent OnChangeCallback=ChangeEvent Events=_events/>
<SelectStands OnChangeCallback=ChangeStand EventStands=_eventStandList/>


<div>
    <h3>Content</h3>
    <div class="row">
    <table class="table col-md-12 mx-auto">
    <thead>
        <tr>
            <td>Product</td>
            <td>Amount</td>
        </tr>
    </thead>
    <tbody>
        @if(_customerChip != null)
        {
               @foreach(var item in _customerChip.StandProducts)
               {
                  @*  @if(item.EventStandId == EventStandId)
                    {*@
                           <tr>
                                <td>@item.Name</td>
                                <td>@item.Amount</td>
                            </tr> 

                    @*}*@
               }
        }
     
    </tbody>
</table>
</div>
</div>
<div>

</div>



    @code {
        private List<EventStandModel> _eventStandList = new List<EventStandModel>();
        private UserModel _user;
        private int _bindItem;
        private int _bindEvent;
        private HubConnection _hubConnection;
        private List<string> _messages = new List<string>();
        private List<EventModel> _events = new List<EventModel>();
        private ChipModel _customerChip;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _user = await _userRepository.GetAsyncByEmail(user.Identity.Name);
        _events = await _eventRepository.GetAllByCompanyIdAsync(_user.Company.Id);
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/connectionhub"),options =>
                {
                   options.UseDefaultCredentials = true;
               })
            .Build();

        _hubConnection.On<string,ChipModel>("RecieveStand", (id,chip) =>
        {
            _hubConnection.SendAsync("SendSelectedStand", _bindItem, id);
            _customerChip = chip;
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    private void ChangeStand(ChangeEventArgs e)
    {
        _bindItem = Convert.ToInt32(e.Value);

    }

    private async Task ChangeEvent(ChangeEventArgs e)
    {
        _bindEvent = Convert.ToInt32(e.Value);
        _eventStandList = await _eventStandRepository.GetAllByEventIdAsync(_bindEvent);
        StateHasChanged();
        

    }


}
