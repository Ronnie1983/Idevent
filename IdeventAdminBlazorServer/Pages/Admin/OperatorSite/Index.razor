@using IdeventLibrary.Repositories;
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject EventStandRepository _eventStandRepository
@inject EventRepository _eventRepository
@inject UserRepository _userRepository
@inject ChipRepository _chipRepository
@inject ChipContentRepository _chipContentRepository
@inject StandProductRepository _standProductRepository
@inject AuthenticationStateProvider AuthenticationStateProvider


@page "/OperatorSite"

<h1>Operator's Site</h1>
@if (_bindStandId == 0)
{
    <SelectEvent OnChangeCallback=ChangeEvent Events=_events />
    <SelectStands OnChangeCallback=ChangeStand EventStands=_eventStandList />
}
else
{
    <h4>Stand: @_eventStandList.Find(x => x.Id.Equals(_bindStandId)).Name</h4>
}

<div>
    <h3>Content</h3>

    @if (_customerChip != null)
    {
        <div class="row bg-success">
            <h3>Chip id: @_customerChip.Id</h3>
            <table class="table col-md-12 mx-auto">
                <thead>
                    <tr>
                        <td>Product</td>
                        <td>Amount</td>
                    </tr>
                </thead>
                <tbody>


                    @foreach (var item in _customerChip.StandProducts)
                    {
                        @if (item.EventStandModel.Id == _bindStandId)
                        {
                            <tr>
                                <td>@item.Name</td>
                                <td>@item.Amount</td>
                            </tr>

                        }
                    }


                </tbody>
            </table>
        </div>
        @if (!_orderSent)
        {
            <div>
            <h3>Buy/Sell</h3>
            <EditForm Model="_productsToBuyAndSell" OnValidSubmit="HandleValidSubmitChip">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <table class="text-center">
                        <thead>
                            <tr>
                                <th>Event product</th>
                                <th>-</th>
                                <th>Amounts</th>
                                <th>+</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in _productsToBuyAndSell)
                            {
                                <tr>
                                    <td>@product.Name</td>
                                    <td class="px-2">
                                        <button type="button" class="bg-danger fw-bold customCircleBtn" @onclick="() => {product.Amount--;}">-</button>
                                    </td>
                                    <td><input class="text-center" @bind-value="@product.Amount" /></td>
                                    <td class="px-2">
                                        <button type="button" class="bg-success fw-bold customCircleBtn" @onclick="() => {product.Amount++;}">+</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <button type="submit" class="btn btn-primary">Submit</button>
                    <button type="button" class="btn btn-danger m-1" @onclick="@(e => Cancel())">Cancel</button>
            </EditForm>
            </div>

        }
        else
        {
            <table class="text-center">
                        <thead>
                            <tr>
                                <th>Event product</th>
                                
                                <th>Amounts</th>
                               
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in _productsToBuyAndSell)
                            {
                                <tr>
                                    <td>@product.Name</td>
                                    
                                    <td>@product.Amount</td>
                                    
                                </tr>
                            }
                        </tbody>
                    </table>

        }
        
    }
    else
    {
        <div class="row bg-warning">
            <h4>No chip scannet</h4>
        </div>
    }

</div>





@code {
    private List<EventStandModel> _eventStandList = new List<EventStandModel>();
    private UserModel _user;
    private int _bindStandId;
    private int _bindEventId;
    private RenderFragment _displayMessage;
    private HubConnection _hubConnection;
    private List<string> _messages = new List<string>();
    private List<EventModel> _events = new List<EventModel>();
    private ChipModel _customerChip;
    private List<StandProductModel> _productsToBuyAndSell;
    private string _connectionId;
    private bool _orderSent = false;



    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _user = await _userRepository.GetByEmailAsync(user.Identity.Name);
        _events = await _eventRepository.GetAllByCompanyIdAsync(_user.Company.Id);

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/connectionhub"), options =>
                 {
                     options.UseDefaultCredentials = true;
                 })
            .Build();

        _hubConnection.On<int>("ClientAccept", async (input) =>
        {
            if(input == _customerChip.Id)
            {
                await _chipContentRepository.CreateAndUpdateMultipleAsync(_productsToBuyAndSell, _customerChip.Id);
                _orderSent = false;
                _customerChip = null;
                _productsToBuyAndSell = await _standProductRepository.GetAllProductsByStandIdAsync(_bindStandId);
                StateHasChanged();
            }

        });

        _hubConnection.On<string, ChipModel>("RecieveStand", (id, chip) =>
         {
             _hubConnection.SendAsync("SendSelectedStand", _bindStandId, id);
             _customerChip = chip;
             _connectionId = id;
             StateHasChanged();
         });

        await _hubConnection.StartAsync();
    }

    private async Task ChangeStand(ChangeEventArgs e)
    {
        _bindStandId = Convert.ToInt32(e.Value);
        _productsToBuyAndSell = await _standProductRepository.GetAllProductsByStandIdAsync(_bindStandId);
        StateHasChanged();

    }

    private async Task ChangeEvent(ChangeEventArgs e)
    {
        _bindEventId = Convert.ToInt32(e.Value);
        _eventStandList = await _eventStandRepository.GetAllByEventIdAsync(_bindEventId);

        StateHasChanged();


    }

    private async Task HandleValidSubmitChip()
    {

        await _hubConnection.SendAsync("SendOrder", _productsToBuyAndSell, _connectionId);
        _orderSent = true;
        StateHasChanged();

    }
    private async Task Cancel()
    {
        await _hubConnection.SendAsync("CancelTransaction", _connectionId);
         _orderSent = false;
                _customerChip = null;
                _productsToBuyAndSell = await _standProductRepository.GetAllProductsByStandIdAsync(_bindStandId);
                StateHasChanged();
        
    }


}
