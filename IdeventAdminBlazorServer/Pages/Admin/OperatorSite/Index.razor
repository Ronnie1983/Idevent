@using IdeventLibrary.Repositories;
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject EventStandRepository _eventStandRepo
@inject EventRepository _eventRepo
@inject UserRepository _userRepo;
@inject AuthenticationStateProvider AuthenticationStateProvider

@page "/OperatorSite"

<h1>Operator's Site</h1>

<SelectEvent OnChangeCallback=ChangeEvent Events=_events/>
<SelectStands OnChangeCallback=ChangeStand EventStands=_eventStandList/>



@code {
    private List<EventStandModel> _eventStandList = new List<EventStandModel>();
    private UserModel _user;
    private int _bindItem;
    private int _bindEvent;
    private HubConnection _hubConnection;
    private List<string> _messages = new List<string>();
    private List<EventModel> _events = new List<EventModel>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _user = await _userRepo.GetAsyncByEmail(user.Identity.Name);
        _events = await _eventRepo.GetAllByCompanyIdAsync(_user.Company.Id);
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/connectionhub"),options =>
                {
                   options.UseDefaultCredentials = true;
               })
            .Build();

        _hubConnection.On<string>("RecieveStand", (id) =>
        {
            _hubConnection.SendAsync("SendSelectedStand", _bindItem, id);
        });

        await _hubConnection.StartAsync();
    }

    private void ChangeStand(ChangeEventArgs e)
    {
        _bindItem = Convert.ToInt32(e.Value);

    }

    private async Task ChangeEvent(ChangeEventArgs e)
    {
        _bindEvent = Convert.ToInt32(e.Value);
        _eventStandList = await _eventStandRepo.GetAllByEventIdAsync(_bindEvent);
        StateHasChanged();
        

    }


}
